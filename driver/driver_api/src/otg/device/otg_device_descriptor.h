#include "type.h"
#include "otg_device_standard_request.h"

uint8_t DeviceDescriptor[] =
{
	0x12,        // bLength: 			Độ dài mô tả (18 byte)
	0x01,        // bDescriptorType: 	Loại descriptor = DEVICE
	0x10, 0x01,  // bcdUSB: 			Phiên bản USB 1.1 (0x0110)
	0x00,        // bDeviceClass: 		Class chung (0x00 nghĩa là interface tự định nghĩa)
	0x00,        // bDeviceSubClass: 	Subclass (0x00)
	0x00,        // bDeviceProtocol: 	Protocol (0x00)
	0x40,        // bMaxPacketSize0: 	Kích thước gói tối đa cho EP0 = 64 bytes
	0x00, 0x00,  // idVendor: 			ID nhà sản xuất (VID), sẽ được set trong code
	0x00, 0x00,  // idProduct: 			ID sản phẩm (PID), sẽ được set trong code
	0x00, 0x01,  // bcdDevice: 			Phiên bản thiết bị (v1.00)
	0x01,        // iManufacturer: 		Index chuỗi tên nhà sản xuất 	String Descriptor 1)
	0x02,        // iProduct: 			Index chuỗi tên sản phẩm 		(String Descriptor 2)
	0x03,        // iSerialNumber: 		Index chuỗi số serial 			(String Descriptor 3)
	0x01         // bNumConfigurations: Số cấu hình hỗ trợ = 1
};


const uint8_t AudioCtrlReportDescriptor[] =
{
	0x05, 0x0C,	// Usage Page 	(Consumer Devices) → Thiết bị tiêu dùng (âm thanh, media,...)
	0x09, 0x01, // Usage 		(Consumer Control) → Bộ điều khiển media
	0xA1, 0x01,	// Collection 	(Application) → Bắt đầu nhóm mô tả

	0x15, 0x00,	// Logical Minimum (0)
	0x25, 0x01,	// Logical Maximum (1)

	// Các phím điều khiển media
	0x09, 0xE9,	// Usage: Volume Up
	0x09, 0xEA, // Usage: Volume Down
	0x09, 0xB5, // Usage: Next Track
	0x09, 0xB6, // Usage: Previous Track
	0x09, 0xE2, // Usage: Mute
	0x09, 0xB3, // Usage: Fast Forward
	0x09, 0xCD, // Usage: Play/Pause
	0x09, 0xB7, // Usage: Stop

	0x75, 0x01,	// Report Size: 1 bit
	0x95, 0x08, // Report Count: 8 → 8 phím, mỗi phím 1 bit (ON/OFF)

	0x81, 0x42, // Input (Data, Var, Abs, Vol) → Dữ liệu đầu vào kiểu biến, tuyệt đối

	0xC0        // End Collection
};


#if HID_DATA_FUN_EN
// Đoạn mã mô tả HID Report Descriptor
const uint8_t HidDataReportDescriptor[] =
{
	0x06, 0x00, 0xFF,  // Định nghĩa Usage Page: sử dụng trang cho thiết bị (ở đây là một mã trang người dùng tự định nghĩa)
	0x0A, 0xAA, 0x55,  // Usage (AA55): chỉ định một Usage cụ thể
	0xA1, 0x01,         // Collection (Application): Bắt đầu collection cho các báo cáo của thiết bị

	0x15, 0x00,         // Logical Minimum (0)
	0x26, 0xFF, 0x00,   // Logical Maximum (255) - 1 byte
	0x75, 0x08,         // Report Size (8 bits)

	// Định nghĩa các nút đầu vào (input)
	0x96, 0x00, 0x01,   // Đặt độ dài báo cáo đầu vào
	0x09, 0x01,         // Usage (Usage ID: 0x01)
	0x81, 0x02,         // Input (Data, Var, Abs, Vol) - đầu vào kiểu dữ liệu biến, tuyệt đối

	0x96, 0x00, 0x01,   // Đặt độ dài báo cáo đầu ra
	0x09, 0x01,         // Usage (Usage ID: 0x01)
	0x91, 0x02,         // Output (Data, Var, Abs, Vol) - đầu ra kiểu dữ liệu biến, tuyệt đối

	0x95, 0x08,         // Report Count (8)
	0x09, 0x01,         // Usage (Usage ID: 0x01)
	0xB1, 0x02,         // Feature (Data, Var, Abs, Vol) - tính năng có thể thay đổi
	0xC0                // End Collection - kết thúc Collection
};
#endif


#define ConfigDescriptor_Tab(x) 	ConfigDescriptor_##x
#define InterFaceNum_Tab(x) 		InterFaceNum_##x


const uint8_t ConfigDescriptor_AUDIO_ONLY[] =
{

	0x09,0x02,163,0x00,0x04,0x01,0x00,0x80,0x32,

	//0 audio control Interface
	0x09,0x04,0x00,0x00,0x00,0x01,0x01,0x00,0x00,

		// Định nghĩa các Audio Control descriptors
		0x09,0x24,0x01,0x00,0x01,/*0x4F*/40,0x00,0x01,0x01,
		0x0C,0x24,0x02,0x01,0x01,0x01,0x00,0x02,0x03,0x00,0x00,0x00,
		0x0A,0x24,0x06,0x02,0x01,0x01,0x01,0x02,0x02,0x00,
		0x09,0x24,0x03,0x03,0x01,0x03,0x00,0x02,0x00,

	// 1 - Audio Stream Interface (Giao diện luồng âm thanh)
	0x09,0x04,0x01,0x00,0x00,0x01,0x02,0x00,0x00,

		0x09,0x04,0x01,0x01,0x01,0x01,0x02,0x00,0x00,
		0x07,0x24,0x01,0x01,0x01,0x01,0x00,
		0x0E,0x24,0x02,0x01,0x02,0x02,0x10,0x02,0x44,0xAC, 0x00,0x80,0xBB, 0x00,
		0x09, 0x05, DEVICE_ISO_OUT_EP, 0x09, DEVICE_FS_ISO_OUT_MPS, 0x00, 0x01, 0x00, 0x00,
		0x07,0x25,0x01,0x01,0x00,0x00,0x00,

	// 2 - HID Interface Audio Control
	0x09,0x04,0x02,0x00,0x01,0x03,0x00,0x00,0x00,
		0x09,0x21,0x01,0x02,0x00,0x01,0x22,sizeof(AudioCtrlReportDescriptor),0x00,
		0x07,0x05,DEVICE_INT_IN_EP1,0x03,DEVICE_FS_INT_IN_MPS,0x00,0x01,

	// 3 - HID Data Interface
	0x09,0x04,0x03,0x00,0x01,0x03,0x00,0x00,0x00,
		0x09,0x21,0x01,0x02,0x00,0x01,0x22,sizeof(HidDataReportDescriptor),0x00,
		0x07, 0x05, DEVICE_INT_IN_EP2, 0x03, DEVICE_FS_INT_IN_MPS, 0x00, 0x01
};
const uint8_t InterFaceNum_AUDIO_ONLY[] = {0xFF,0x00,0x01,0xFF,0x02,0x03};




////���� ֻ��MIC����
const uint8_t ConfigDescriptor_Tab(MIC_ONLY)[] =
{
#if HID_DATA_FUN_EN
	//һ��4���ӿ�
	0x09,0x02,163,0x00,0x04,0x01,0x00,0x80,0x32,
#else
	0x09,0x02,163-18,0x00,0x03,0x01,0x00,0x80,0x32,
#endif
	//0 audio control Interface
	0x09,0x04,0x00,0x00,0x00,0x01,0x01,0x00,0x00,

	0x09,0x24,0x01,0x00,0x01,47,0x00,0x01,0x01,

	0x0C,0x24,0x02,0x04,0x01,0x02,0x00,0x02,0x03,0x00,0x00,0x00,
	0x0A,0x24,0x06,0x05,0x04,0x01,0x01,0x02,0x02,0x00,
	0x07,0x24,0x05,0x06,0x01,0x05,0x00,
	0x09,0x24,0x03,0x07,0x01,0x01,0x00,0x06,0x00,

	//2 audio stream Interface, microphone
	0x09,0x04,0x01,0x00,0x00,0x01,0x02,0x00,0x00,
	0x09,0x04,0x01,0x01,0x01,0x01,0x02,0x00,0x00,
	0x07,0x24,0x01,0x07,0x01,0x01,0x00,
	0x0E,0x24,0x02,0x01,MIC_CH,0x02,0x10,0x02,0x44,0xAC, 0x00,0x80,0xBB, 0x00,
	0x09, 0x05, DEVICE_ISO_IN_EP, 0x09, DEVICE_FS_ISO_IN_MPS, 0x00, 0x01, 0x00, 0x00,
	0x07,0x25,0x01,0x01,0x00,0x00,0x00,

	//3 hid ���ſ���
	0x09,0x04,0x02,0x00,0x01,0x03,0x00,0x00,0x00,
	0x09,0x21,0x01,0x02,0x00,0x01,0x22,sizeof(AudioCtrlReportDescriptor),0x00,
	0x07,0x05,DEVICE_INT_IN_EP1,0x03,DEVICE_FS_INT_IN_MPS,0x00,0x01,
#if HID_DATA_FUN_EN
	0x09,0x04,0x03,0x00,0x00,0x03,0x00,0x00,0x00,
	0x09,0x21,0x01,0x02,0x00,0x01,0x22,sizeof(HidDataReportDescriptor),0x00,
#endif
};
const uint8_t InterFaceNum_Tab(MIC_ONLY)[] = {0xFF,0x00,0xFF,0x01,0x02,0x03};

//���� MIC�����AUDIO���
const uint8_t ConfigDescriptor_Tab(AUDIO_MIC)[] =
{
#if HID_DATA_FUN_EN
	//һ��4���ӿ�
	0x09,0x02,0xE8+18,0x00,0x05,0x01,0x00,0x80,0x32,
#else
	0x09,0x02,0xE8,0x00,0x04,0x01,0x00,0x80,0x32,
#endif
	//0 audio control Interface
	0x09,0x04,0x00,0x00,0x00,0x01,0x01,0x00,0x00,
	0x0A,0x24,0x01,0x00,0x01,0x4F,0x00,0x02,0x01,0x02,
	0x0C,0x24,0x02,0x01,0x01,0x01,0x00,0x02,0x03,0x00,0x00,0x00,
	0x0A,0x24,0x06,0x02,0x01,0x01,0x01,0x02,0x02,0x00,
	0x09,0x24,0x03,0x03,0x01,0x03,0x00,0x02,0x00,
	0x0C,0x24,0x02,0x04,0x01,0x02,0x00,0x02,0x03,0x00,0x00,0x00,
	0x0A,0x24,0x06,0x05,0x04,0x01,0x01,0x02,0x02,0x00,
	0x07,0x24,0x05,0x06,0x01,0x05,0x00,
	0x09,0x24,0x03,0x07,0x01,0x01,0x00,0x06,0x00,

	//1 audio stream Interface, speeaker
	0x09,0x04,0x01,0x00,0x00,0x01,0x02,0x00,0x00,
	0x09,0x04,0x01,0x01,0x01,0x01,0x02,0x00,0x00,
	0x07,0x24,0x01,0x01,0x01,0x01,0x00,
	0x0E,0x24,0x02,0x01,0x02,0x02,0x10,0x02,0x44,0xAC, 0x00,0x80,0xBB, 0x00,
	0x09, 0x05, DEVICE_ISO_OUT_EP, 0x09, DEVICE_FS_ISO_OUT_MPS, 0x00, 0x01, 0x00, 0x00,
	0x07,0x25,0x01,0x01,0x00,0x00,0x00,

	//2 audio stream Interface, microphone
	0x09,0x04,0x02,0x00,0x00,0x01,0x02,0x00,0x00,
	0x09,0x04,0x02,0x01,0x01,0x01,0x02,0x00,0x00,
	0x07,0x24,0x01,0x07,0x01,0x01,0x00,
	0x0E,0x24,0x02,0x01,MIC_CH,0x02,0x10,0x02,0x44,0xAC, 0x00,0x80,0xBB, 0x00,
	0x09, 0x05, DEVICE_ISO_IN_EP, 0x09, DEVICE_FS_ISO_IN_MPS, 0x00, 0x01, 0x00, 0x00,
	0x07,0x25,0x01,0x01,0x00,0x00,0x00,

	//3 hid ���ſ���
	0x09,0x04,0x03,0x00,0x01,0x03,0x00,0x00,0x00,
	0x09,0x21,0x01,0x02,0x00,0x01,0x22,sizeof(AudioCtrlReportDescriptor),0x00,
	0x07,0x05,DEVICE_INT_IN_EP1,0x03,DEVICE_FS_INT_IN_MPS,0x00,0x01,
#if HID_DATA_FUN_EN
	0x09,0x04,0x04,0x00,0x00,0x03,0x00,0x00,0x00,
	0x09,0x21,0x01,0x02,0x00,0x01,0x22,sizeof(HidDataReportDescriptor),0x00,
	0x07, 0x05, 0x85, 0x03, 64, 0x00, 0x01,  // Endpoint Descriptor
#endif
};
const uint8_t InterFaceNum_Tab(AUDIO_MIC)[] = {0xFF,0x00,0x01,0x02,0x03,0x04};


const uint8_t ConfigDescriptor_Tab(READER)[] =
{
//һ��1���ӿ�
0x09,0x02,0x20,0x00,0x01,0x01,0x00,0x80,0x32,

	//mass-storage Interface
	0x09,0x04,0x00,0x00,0x02,0x08,0x06,0x50,0x00,
		0x07,0x05,DEVICE_BULK_IN_EP,0x02, DEVICE_FS_BULK_IN_MPS, 0x00,0x01,
		0x07,0x05,DEVICE_BULK_OUT_EP,0x02,DEVICE_FS_BULK_OUT_MPS,0x00,0x01,
};
const uint8_t InterFaceNum_Tab(READER)[] = {0x00,0xFF,0xFF,0xFF,0xFF,0xFF};


//���� ֻ����Ƶ���
const uint8_t ConfigDescriptor_Tab(AUDIO_READER)[] =
{
#if HID_DATA_FUN_EN
	//һ��4���ӿ�
	0x09,0x02,(156+23),0x00,0x05,0x01,0x00,0x80,0x32,
#else
	0x09,0x02,(156-18+23),0x00,0x04,0x01,0x00,0x80,0x32,
#endif

	//0 mass-storage Interface
	0x09,0x04,0x00,0x00,0x02,0x08,0x06,0x50,0x00,
		0x07,0x05,DEVICE_BULK_IN_EP,0x02, DEVICE_FS_BULK_IN_MPS, 0x00,0x01,
		0x07,0x05,DEVICE_BULK_OUT_EP,0x02,DEVICE_FS_BULK_OUT_MPS,0x00,0x01,

	//1 audio control Interface
	0x09,0x04,0x01,0x00,0x00,0x01,0x01,0x00,0x00,

	0x09,0x24,0x01,0x00,0x01,/*0x4F*/40,0x00,0x01,0x02,
	0x0C,0x24,0x02,0x01,0x01,0x01,0x00,0x02,0x03,0x00,0x00,0x00,
	0x0A,0x24,0x06,0x02,0x01,0x01,0x01,0x02,0x02,0x00,
	0x09,0x24,0x03,0x03,0x01,0x03,0x00,0x02,0x00,

	//2 audio stream Interface, speeaker
	0x09,0x04,0x02,0x00,0x00,0x01,0x02,0x00,0x00,
	0x09,0x04,0x02,0x01,0x01,0x01,0x02,0x00,0x00,
	0x07,0x24,0x01,0x01,0x01,0x01,0x00,
	0x0E,0x24,0x02,0x01,0x02,0x02,0x10,0x02,0x44,0xAC, 0x00,0x80,0xBB, 0x00,
	0x09, 0x05, DEVICE_ISO_OUT_EP, 0x09, DEVICE_FS_ISO_OUT_MPS, 0x00, 0x01, 0x00, 0x00,
	0x07,0x25,0x01,0x01,0x00,0x00,0x00,

	//3 hid ���ſ���
	0x09,0x04,0x03,0x00,0x01,0x03,0x00,0x00,0x00,
	0x09,0x21,0x01,0x02,0x00,0x01,0x22,sizeof(AudioCtrlReportDescriptor),0x00,
	0x07,0x05,DEVICE_INT_IN_EP1,0x03,DEVICE_FS_INT_IN_MPS,0x00,0x01,

#if HID_DATA_FUN_EN
	//4 hid data
	0x09,0x04,0x04,0x00,0x00,0x03,0x00,0x00,0x00,
	0x09,0x21,0x01,0x02,0x00,0x01,0x22,sizeof(HidDataReportDescriptor),0x00,
#endif
};
const uint8_t InterFaceNum_Tab(AUDIO_READER)[] = {0x00,0x01,0x02,0xFF,0x03,0x04};

////���� ֻ��MIC����
const uint8_t ConfigDescriptor_Tab(MIC_READER)[] =
{
#if HID_DATA_FUN_EN
	//һ��4���ӿ�
	0x09,0x02,(163+23),0x00,0x05,0x01,0x00,0x80,0x32,
#else
	0x09,0x02,(163-18+23),0x00,0x04,0x01,0x00,0x80,0x32,
#endif
	//0 mass-storage Interface
	0x09,0x04,0x00,0x00,0x02,0x08,0x06,0x50,0x00,
		0x07,0x05,DEVICE_BULK_IN_EP,0x02, DEVICE_FS_BULK_IN_MPS, 0x00,0x01,
		0x07,0x05,DEVICE_BULK_OUT_EP,0x02,DEVICE_FS_BULK_OUT_MPS,0x00,0x01,

	//1 audio control Interface
	0x09,0x04,0x01,0x00,0x00,0x01,0x01,0x00,0x00,
		0x09,0x24,0x01,0x00,0x01,47,0x00,0x01,0x02,
		0x0C,0x24,0x02,0x04,0x01,0x02,0x00,0x02,0x03,0x00,0x00,0x00,
		0x0A,0x24,0x06,0x05,0x04,0x01,0x01,0x02,0x02,0x00,
		0x07,0x24,0x05,0x06,0x01,0x05,0x00,
		0x09,0x24,0x03,0x07,0x01,0x01,0x00,0x06,0x00,

	//2 audio stream Interface, microphone
	0x09,0x04,0x02,0x00,0x00,0x01,0x02,0x00,0x00,
		0x09,0x04,0x02,0x01,0x01,0x01,0x02,0x00,0x00,
		0x07,0x24,0x01,0x07,0x01,0x01,0x00,
		0x0E,0x24,0x02,0x01,MIC_CH,0x02,0x10,0x02,0x44,0xAC, 0x00,0x80,0xBB, 0x00,
		0x09, 0x05, DEVICE_ISO_IN_EP, 0x09, DEVICE_FS_ISO_IN_MPS, 0x00, 0x01, 0x00, 0x00,
		0x07,0x25,0x01,0x01,0x00,0x00,0x00,

	//3 hid ���ſ���
	0x09,0x04,0x03,0x00,0x01,0x03,0x00,0x00,0x00,
		0x09,0x21,0x01,0x02,0x00,0x01,0x22,sizeof(AudioCtrlReportDescriptor),0x00,
		0x07,0x05,DEVICE_INT_IN_EP1,0x03,DEVICE_FS_INT_IN_MPS,0x00,0x01,
#if HID_DATA_FUN_EN
	0x09,0x04,0x04,0x00,0x00,0x03,0x00,0x00,0x00,
		0x09,0x21,0x01,0x02,0x00,0x01,0x22,sizeof(HidDataReportDescriptor),0x00,
#endif
};

const uint8_t InterFaceNum_Tab(MIC_READER)[] = {0x00,0x01,0xFF,0x02,0x03,0x04};



//���� MIC�����AUDIO���
const uint8_t ConfigDescriptor_Tab(AUDIO_MIC_READER)[] =
{
#if HID_DATA_FUN_EN
	//һ��4���ӿ�
	0x09,0x02,17,0x01,0x06,0x01,0x00,0x80,0x32,
#else
	0x09,0x02,255,0x00,0x05,0x01,0x00,0x80,0x32,
#endif
	//0 mass-storage Interface
	0x09,0x04,0x00,0x00,0x02,0x08,0x06,0x50,0x00,
		0x07,0x05,DEVICE_BULK_IN_EP,0x02, DEVICE_FS_BULK_IN_MPS, 0x00,0x01,
		0x07,0x05,DEVICE_BULK_OUT_EP,0x02,DEVICE_FS_BULK_OUT_MPS,0x00,0x01,

	//0 audio control Interface
	0x09,0x04,0x01,0x00,0x00,0x01,0x01,0x00,0x00,
		0x0A,0x24,0x01,0x00,0x01,0x4F,0x00,0x02,0x02,0x03,
		0x0C,0x24,0x02,0x01,0x01,0x01,0x00,0x02,0x03,0x00,0x00,0x00,
		0x0A,0x24,0x06,0x02,0x01,0x01,0x01,0x02,0x02,0x00,
		0x09,0x24,0x03,0x03,0x01,0x03,0x00,0x02,0x00,
		0x0C,0x24,0x02,0x04,0x01,0x02,0x00,0x02,0x03,0x00,0x00,0x00,
		0x0A,0x24,0x06,0x05,0x04,0x01,0x01,0x02,0x02,0x00,
		0x07,0x24,0x05,0x06,0x01,0x05,0x00,
		0x09,0x24,0x03,0x07,0x01,0x01,0x00,0x06,0x00,

	//1 audio stream Interface, speeaker
	0x09,0x04,0x02,0x00,0x00,0x01,0x02,0x00,0x00,
	0x09,0x04,0x02,0x01,0x01,0x01,0x02,0x00,0x00,
		0x07,0x24,0x01,0x01,0x01,0x01,0x00,
		0x0E,0x24,0x02,0x01,0x02,0x02,0x10,0x02,0x44,0xAC, 0x00,0x80,0xBB, 0x00,
		0x09, 0x05, DEVICE_ISO_OUT_EP, 0x09, DEVICE_FS_ISO_OUT_MPS, 0x00, 0x01, 0x00, 0x00,
		0x07,0x25,0x01,0x01,0x00,0x00,0x00,

	//2 audio stream Interface, microphone
	0x09,0x04,0x03,0x00,0x00,0x01,0x02,0x00,0x00,
	0x09,0x04,0x03,0x01,0x01,0x01,0x02,0x00,0x00,
		0x07,0x24,0x01,0x07,0x01,0x01,0x00,
		0x0E,0x24,0x02,0x01,MIC_CH,0x02,0x10,0x02,0x44,0xAC, 0x00,0x80,0xBB, 0x00,
		0x09, 0x05, DEVICE_ISO_IN_EP, 0x09, DEVICE_FS_ISO_IN_MPS, 0x00, 0x01, 0x00, 0x00,
		0x07,0x25,0x01,0x01,0x00,0x00,0x00,

	//3 hid ���ſ���
	0x09,0x04,0x04,0x00,0x01,0x03,0x00,0x00,0x00,
		0x09,0x21,0x01,0x02,0x00,0x01,0x22,sizeof(AudioCtrlReportDescriptor),0x00,
		0x07,0x05,DEVICE_INT_IN_EP1,0x03,DEVICE_FS_INT_IN_MPS,0x00,0x01,
#if HID_DATA_FUN_EN
	0x09,0x04,0x05,0x00,0x00,0x03,0x00,0x00,0x00,
		0x09,0x21,0x01,0x02,0x00,0x01,0x22,sizeof(HidDataReportDescriptor),0x00,
#endif
};
const uint8_t InterFaceNum_Tab(AUDIO_MIC_READER)[] = {0x00,0x01,0x02,0x03,0x04,0x05};


//HID���ݴ���
const uint8_t ConfigDescriptor_Tab(HID)[] =
{
//һ��1���ӿ�
0x09, 0x02, 0x1B, 0x00, 0x01, 0x01, 0x00, 0x80, 0x32,

	//HID�Զ����ݴ���ӿ�
	0x09,0x04,0x00,0x00,0x00,0x03,0x00,0x00,0x00,
	0x09,0x21,0x01,0x02,0x00,0x01,0x22,sizeof(HidDataReportDescriptor),0x00
};
const uint8_t InterFaceNum_Tab(HID)[] = {0xFF,0xFF,0xFF,0xFF,0xFF,0x00};

const uint8_t * const ConfigDescriptorTab[8] =
{
	ConfigDescriptor_AUDIO_ONLY,
	ConfigDescriptor_Tab(MIC_ONLY),
	ConfigDescriptor_Tab(AUDIO_MIC),
	ConfigDescriptor_Tab(READER),
	ConfigDescriptor_Tab(AUDIO_READER),
	ConfigDescriptor_Tab(MIC_READER),
	ConfigDescriptor_Tab(AUDIO_MIC_READER),
	ConfigDescriptor_Tab(HID)
};

const uint8_t * const InterFaceNumTab[8] =
{
	InterFaceNum_AUDIO_ONLY,
	InterFaceNum_Tab(MIC_ONLY),
	InterFaceNum_Tab(AUDIO_MIC),
	InterFaceNum_Tab(READER),
	InterFaceNum_Tab(AUDIO_READER),
	InterFaceNum_Tab(MIC_READER),
	InterFaceNum_Tab(AUDIO_MIC_READER),
	InterFaceNum_Tab(HID)
};

